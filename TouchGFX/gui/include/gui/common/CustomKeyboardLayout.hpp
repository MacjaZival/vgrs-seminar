/*
 * CustomKeyboardLayout.hpp
 *
 *  Created on: Aug 8, 2024
 *      Author: matos
 */

#ifndef APPLICATION_USER_GUI_CUSTOMKEYBOARDLAYOUT_HPP_
#define APPLICATION_USER_GUI_CUSTOMKEYBOARDLAYOUT_HPP_

#include <touchgfx/widgets/Keyboard.hpp>
#include <touchgfx/hal/Types.hpp>
#include <fonts/ApplicationFontProvider.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

using namespace touchgfx;

/**
 * every key is 32*54 no padding between keys
 *
 * bottom row has 2px empty space below
 */
#define FIRST_ROW_X_OFFSET 32
#define SECOND_ROW_X_OFFSET 32
#define THIRD_ROW_X_OFFSET 0
#define FOURTH_ROW_X_OFFSET 64

#define FIRST_ROW_Y_OFFSET 0
#define SECOND_ROW_Y_OFFSET 54
#define THIRD_ROW_Y_OFFSET 108
#define FOURTH_ROW_Y_OFFSET 162

#define KEY_WIDTH 32
#define KEY_HEIGHT 54
#define KEY_OFFSET 32
#define SPACE_WIDTH 288
#define SPACE_HEIGHT 54

#define MOD_KEY_WIDTH 64
#define MOD_KEY_HEIGHT 54
/**
 * Array specifying the keys used in the CustomKeyboard.
 */
static const Keyboard::Key keyArray[49] =
{
    { 1, Rect(FIRST_ROW_X_OFFSET, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 2, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 3, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 2, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 4, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 3, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 5, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 4, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 6, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 5, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 7, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 6, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 8, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 7, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    { 9, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 8, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {10, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 9, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {11, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 10, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
	{12, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 11, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
	{13, Rect(FIRST_ROW_X_OFFSET + KEY_OFFSET * 12, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},

    {14, Rect(SECOND_ROW_X_OFFSET, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {15, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {16, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 2, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {17, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 3, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {18, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 4, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {19, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 5, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {20, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 6, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {21, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 7, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {22, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 8, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {23, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 9, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {24, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 10, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {25, Rect(SECOND_ROW_X_OFFSET + KEY_OFFSET * 11, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},

    {26, Rect(THIRD_ROW_X_OFFSET, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 2, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 3, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 4, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {31, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 5, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {32, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 6, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {33, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 7, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {34, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 8, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {35, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 9, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {36, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 10, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {37, Rect(THIRD_ROW_X_OFFSET + KEY_OFFSET * 11, THIRD_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},

    {38, Rect(FOURTH_ROW_X_OFFSET, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {39, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {40, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 2, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {41, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 3, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {42, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 4, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {43, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 5, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {44, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 6, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {45, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 7, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {46, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 8, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {47, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 9, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {48, Rect(FOURTH_ROW_X_OFFSET + KEY_OFFSET * 10, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},

    {49, Rect(64*2, 54*4, SPACE_WIDTH, SPACE_HEIGHT), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};

/**
 * Callback areas for the special buttons on the CustomKeyboard.
 */
static Keyboard::CallbackArea callbackAreas[11] =
{
	{Rect(0, FIRST_ROW_Y_OFFSET, KEY_WIDTH , KEY_HEIGHT), 0, BITMAP_KEYBOARD_ESC_HIGHLIGHTED_ID},       // ESC
	{Rect(14*32, FIRST_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_DEL_HIGHLIGHTED_ID},       // DEL

	{Rect(0, SECOND_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_TAB_HIGHLIGHTED_ID},       // TAB
    {Rect(13*32, SECOND_ROW_Y_OFFSET, MOD_KEY_WIDTH, MOD_KEY_HEIGHT), 0, BITMAP_KEYBOARD_BACKSPACE_HIGHLIGHTED_ID},  // backspace

	{Rect(12*32, THIRD_ROW_Y_OFFSET, 32*3, 54), 0, BITMAP_KEYBOARD_ENTER_HIGHLIGHTED_ID},       // enter

    {Rect(0, FOURTH_ROW_Y_OFFSET, MOD_KEY_WIDTH, MOD_KEY_HEIGHT), 0, BITMAP_KEYBOARD_SHIFT_HIGHLIGHTED_ID},     // shift
	{Rect(13*32, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_HOME_HIGHLIGHTED_ID},       // home
	{Rect(14*32, FOURTH_ROW_Y_OFFSET, KEY_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_END_HIGHLIGHTED_ID},       // end

	{Rect(0, 54*4, MOD_KEY_WIDTH, MOD_KEY_HEIGHT), 0, BITMAP_KEYBOARD_CTRL_HIGHLIGHTED_ID},       // CTRL
	{Rect(64, 54*4, MOD_KEY_WIDTH, MOD_KEY_HEIGHT), 0, BITMAP_KEYBOARD_MOD_HIGHLIGHTED_ID},       // MOD
    {Rect(13*32, 54*4, MOD_KEY_WIDTH, MOD_KEY_HEIGHT), 0, BITMAP_KEYBOARD_ALT_HIGHLIGHTED_ID},       // ALT

};

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout fullscreenLayout =
{
    BITMAP_KEYBOARD_BACKGROUND_ID,
    keyArray,
    49,
    callbackAreas,
    11,
    Rect(500, 500, 0, 0),
    TypedText(T_ENTEREDTEXT),
    0xFFFFFF,
    Typography::KEYBOARD,
    0
};

#endif /* APPLICATION_USER_GUI_CUSTOMKEYBOARDLAYOUT_HPP_ */
